# -*- coding: utf-8 -*-
"""karavi_alireza_patternrecognition_improm_selction_property_14030919.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11znjv9k0pX6Q3vZqvg6nUvxDrZVmz2oZ
"""

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load the dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data'
data = pd.read_csv(url, header=None)

# Rename the columns
data.columns = ['ID', 'Diagnosis', 'Radius_Mean', 'Texture_Mean', 'Perimeter_Mean', 'Area_Mean', 'Smoothness_Mean',
                'Compactness_Mean', 'Concavity_Mean', 'Concave_Points_Mean', 'Symmetry_Mean', 'Fractal_Dimension_Mean',
                'Radius_SE', 'Texture_SE', 'Perimeter_SE', 'Area_SE', 'Smoothness_SE', 'Compactness_SE', 'Concavity_SE',
                'Concave_Points_SE', 'Symmetry_SE', 'Fractal_Dimension_SE', 'Radius_Worst', 'Texture_Worst',
                'Perimeter_Worst', 'Area_Worst', 'Smoothness_Worst', 'Compactness_Worst', 'Concavity_Worst',
                'Concave_Points_Worst', 'Symmetry_Worst', 'Fractal_Dimension_Worst']

# Convert the target variable to numerical values (0 for benign, 1 for malignant)
data['Diagnosis'] = data['Diagnosis'].map({'B': 0, 'M': 1})

# Split the data into features and target
X = data.drop(['ID', 'Diagnosis'], axis=1)
y = data['Diagnosis']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train a logistic regression model
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# Evaluate the model
y_pred = model.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Print the confusion matrix and classification report
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred))
print('\nClassification Report:')
print(classification_report(y_test, y_pred))

# Train a random forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Feature importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
top_10_features = feature_importances.nlargest(10).index.tolist()
print('Top 10 important features:', top_10_features)

# Recursive Feature Elimination (RFE)
rfe = RFE(model, n_features_to_select=10)
rfe.fit(X_train, y_train)
top_10_rfe_features = X.columns[rfe.support_].tolist()
print('Top 10 features selected by RFE:', top_10_rfe_features)

# Evaluate the model with top 10 features
X_train_top_10 = X_train[top_10_features]
X_test_top_10 = X_test[top_10_features]

model_top_10 = RandomForestClassifier(n_estimators=100, random_state=42)
model_top_10.fit(X_train_top_10, y_train)

y_pred_top_10 = model_top_10.predict(X_test_top_10)
accuracy_top_10 = accuracy_score(y_test, y_pred_top_10)
print(f'Accuracy with top 10 features: {accuracy_top_10:.2f}')

# Print the confusion matrix and classification report
print('Confusion Matrix:')
print(confusion_matrix(y_test, y_pred_top_10))
print('\nClassification Report:')
print(classification_report(y_test, y_pred_top_10))

# Train a random forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Feature importance
feature_importances = pd.Series(model.feature_importances_, index=X.columns)
top_10_features = feature_importances.nlargest(10).index.tolist()

# Evaluate the model with each of the 10 features
for feature in top_10_features:
    X_train_single = X_train[[feature]]
    X_test_single = X_test[[feature]]

    model_single = RandomForestClassifier(n_estimators=100, random_state=42)
    model_single.fit(X_train_single, y_train)

    y_pred_single = model_single.predict(X_test_single)
    accuracy_single = accuracy_score(y_test, y_pred_single)

    print(f'Accuracy with {feature}: {accuracy_single:.2f}')